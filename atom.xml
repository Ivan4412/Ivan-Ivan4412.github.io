<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-02T13:14:30.548Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ivan Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/04/02/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/04/02/Hexo-Github-Pages搭建个人博客/</id>
    <published>2018-04-02T13:14:30.517Z</published>
    <updated>2018-04-02T13:14:30.548Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: Hexo + Github Pages搭建个人博客<br>date: 2018-04-02 11:25:59<br>tags: [Hexo,Github Pages]</p><h2 id="category-Hexo"><a href="#category-Hexo" class="headerlink" title="category: Hexo"></a>category: Hexo</h2><p>1、下载安装 Node.js</p><p>下载地址：<a href="https://nodejs.org/download/" target="_blank" rel="noopener">https://nodejs.org/download/</a></p><p>进入release文件夹下载最近版本安装。</p><p>安装完成后，在cmd中输入”path”命令，可查看当前系统环境变量配置情况。其中可以看到nodejs已经配置好。</p><p>输入node -v，可查看当前版本。</p><p>2、安装Hexo</p><p>npm是随同NodeJS一起安装的包管理工具，安装完Node.js后，可以发现同时npm工具也同时安装好了。</p><p>进入存放博客文件的文件夹下。</p><p>安装hexo命令:</p><p>npm install hexo-cli -g<br>输入：hexo -v后，可以看到hexo命令安装完成。</p><p>初始化hexo :</p><p>init blog<br>进入blog文件夹后安装hexo的扩展插件：</p><p>npm install<br>生成网站静态文件：</p><p>hexo g # 或者hexo generate<br>启动hexo本地web服务：</p><p>hexo s # 或者hexo server<br>启动服务后，可以在<em><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></em> 查看内置生成的博客。</p><p>3、下载安装Git</p><p>下载地址：<a href="https://git-scm.com/download/" target="_blank" rel="noopener">https://git-scm.com/download/</a></p><p>命令提示符中输入“path”命令，可以看到：</p><p>命令提示符中输入git version，查看安装好的版本。</p><p>4、Github Pages设置</p><p>GitHub Pages 是托管在GitHub的项目，可以通过 <a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 来访问托管在Github个人主页，前提是仓库的名字必须是 username.github.io，每个账户只能有一个这样的仓库来托管主页。</p><p>GitHub上建立专门存放主页的仓库<br>通过new repository新增一个仓库。<br>在Setting中，以 username.github.io 的形式命名新建的仓库。<br>注意GitHub Pages的Source中选中master branch。<br>这样通过 <a href="https://ivan4412.github.io/" target="_blank" rel="noopener">https://ivan4412.github.io/</a> ，就可以访问github新建的主页了。<br>部署Hexo到Github Pages 通过之前的步骤，我们已经启用了github上的个人主页，但是这并不是我们所需要的。接下来，我们需要通过hexo generate命令 成一个静态网站，并将这个静态网站，部署到github上。</p><p>2.1. 修改配置文件blog/_config.yml，找到deploy项，修改如下内容:</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a></h2><p> deploy:</p><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>   type: git</p><h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><p>   repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Ivan4412/Ivan4412.github.io.git</p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>   branch: master<br>注意：各项冒号后面需紧接着一个空格。</p><p>2.2. 部署hexo<br>通过hexo命令部署hexo到GitHub中:</p><h1 id="清空静态页面"><a href="#清空静态页面" class="headerlink" title="清空静态页面"></a>清空静态页面</h1><pre><code>hexo clean #（或hexo c）# 生成静态页面hexo generate #（或hexo g）# 部署 hexo deploy #（或hexod ）</code></pre><ol start="5"><li>问题</li></ol><p>问题1：如果此时产生 ERROR Deployer not found: git错误。</p><p>这是由于hexo缺少git扩展的拓展插件，执行如下命令安装即可：</p><p>npm install –save hexo-deployer-git<br>问题2：执行hexo deploy，报错：</p><p>Error: Host key verification failed.<br>      fatal: Could not read from remote repository.<br>      Please make sure you have the correct access rightsand the repository exists.<br>使用git协议提交项目，需要配置相应的密钥对。首先需生成本地密钥对 ，然后将对应的公钥设置到远程远程仓库上。</p><p>生成SSH-Key</p><p>进入Git安装目录下，找到git-bash.exe,执行如下命令：</p><p>git config –global user.name “用户名称”<br>     git config –global user.email “邮件地址@youremail.com “<br>     ssh-keygen -t rsa -C 邮件地址@youremail.com<br>按提示生成SSH key，期间会要求输入密码，这个密码会在提交项目时用到，主要是防止别人随意提交项目内容。或者也可以不输入，这样就下次提交时就可以直接提交。</p><p>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;<br>     Enter same passphrase again:&lt;再次输入加密串&gt;<br>将SSH Key 添加到 GitHub 打开本地 id_rsa.pub 文件，将其内容拷贝到GitHub的Deploy Keys中（路径为：Settings/DeployKeys,注意勾选Allow write access） 使用SSH命令，验证是否链接到了github:</p><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>再次部署，运行hexo deploy</p><p>访问 <a href="https://ivan4412.github.io/，就可以看到部署到Github中的个人主页。" target="_blank" rel="noopener">https://ivan4412.github.io/，就可以看到部署到Github中的个人主页。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: Hexo + Github Pages搭建个人博客&lt;br&gt;date: 2018-04-02 11:25:59&lt;br&gt;tags: [Hexo,Github Pages]&lt;/p&gt;
&lt;h2 id=&quot;category-Hexo&quot;&gt;&lt;a href=&quot;#cate
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown使用入门</title>
    <link href="http://yoursite.com/2018/04/02/Markdown%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/04/02/Markdown使用入门/</id>
    <published>2018-04-02T11:34:43.000Z</published>
    <updated>2018-04-02T13:14:28.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、特殊字符："><a href="#1、特殊字符：" class="headerlink" title="1、特殊字符："></a>1、特殊字符：</h2><p>对于部分Markdown语法中的特殊字符，需输出原字符的话，使用反斜线：即可。  如： &copy;：\&copy;</p><h2 id="2、换行"><a href="#2、换行" class="headerlink" title="2、换行"></a>2、换行</h2><p>上一行行尾至少有两个及以上的空格</p><h2 id="3、标题："><a href="#3、标题：" class="headerlink" title="3、标题："></a>3、标题：</h2><ol><li><p>类 Setext 形式：  </p><p> 代码:   </p><pre><code>This is an H1  =============  This is an H2  -------------</code></pre><p> 输出： </p><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title=" This is an H1  "></a> This is an H1  </h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title=" This is an H2  "></a> This is an H2  </h2></li></ol><ol start="2"><li><p>类 Atx 形式:  </p><p> 代码:   </p><pre><code># 这是 H1  ## 这是 H2 </code></pre><p> 输出： </p><h1 id="这是-H1"><a href="#这是-H1" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2"><a href="#这是-H2" class="headerlink" title="这是 H2"></a>这是 H2</h2></li></ol><h2 id="4、区块引用"><a href="#4、区块引用" class="headerlink" title="4、区块引用"></a>4、区块引用</h2><p>每行的最前面加上 &gt;。<br>代码：  </p><pre><code>&gt; This is a blockquote with two paragraphs. </code></pre><p>输出：</p><blockquote><p>This is a blockquote with two paragraphs. </p></blockquote><p>多重嵌套：<br>代码：  </p><pre><code>&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><p>输出：</p><blockquote><blockquote><p>This is nested blockquote.</p></blockquote><p>Back to the first level.</p></blockquote><p>嵌套其他 Markdown 语法：<br>代码：  </p><pre><code>&gt; ## 这是一个标题。&gt; &gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><p>输出：  </p><blockquote><h2 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h2><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><h2 id="5、列表"><a href="#5、列表" class="headerlink" title="5、列表"></a>5、列表</h2><ol><li><p>无序列表使用星号、加号或是减号作为列表标记：<br> 代码：  </p><pre><code>* Red* yellow+ Green- Blu</code></pre><p> 输出：  </p><ul><li>Red</li><li>yellow</li></ul><ul><li>Green</li></ul><ul><li>Blu</li></ul></li><li><p>有序列表则使用数字接着一个英文句点：(表标记上使用的数字并不会影响输出结果)<br> 代码：  </p><pre><code>2.  Bird1.  McHale3.  Parish</code></pre><p> 输出：  </p><ol start="2"><li>Bird</li><li>McHale</li><li>Parish</li></ol></li><li><p>列表中加入引用，需用&gt; 缩进：<br> 代码：  </p><pre><code>+   A list item with a blockquote:  &gt; This is a blockquote&gt; inside a list item.</code></pre><p> 输出：  </p><ul><li>A list item with a blockquote:  <blockquote><p>This is a blockquote<br>inside a list item.</p></blockquote></li></ul></li></ol><h2 id="6、代码"><a href="#6、代码" class="headerlink" title="6、代码"></a>6、代码</h2><ol><li><p>代码区块：<br> 缩进 4 个空格或是 1 个制表符。  </p><pre><code>这是一个代码区块。</code></pre></li><li><p>标记小段行内代码：<br> 使用反引号把它包起来（`）,对于代码中的`，使用两个反引号括住（`` ) 。<br> 代码：</p><pre><code>Use the `printf()` function.``There is a literal backtick (`) here.``</code></pre><p> 输出：<br> Use the <code>printf()</code> function.<br> <code>There is a literal backtick (`) here.</code></p></li></ol><h2 id="7、分割线"><a href="#7、分割线" class="headerlink" title="7、分割线"></a>7、分割线</h2><p>一行中用三个以上的星号、减号、底线来建立一个分隔线。<br>代码：  </p><pre><code>* * *---</code></pre><p>输出：  </p><hr><hr><h2 id="8、链接"><a href="#8、链接" class="headerlink" title="8、链接"></a>8、链接</h2><ol><li><p>行内式链接：<br>方块括号后面紧接着圆括号并插入网址链接，后面紧接双引号包起的文字可以显示为链接提示文字。<br> 代码：   </p><pre><code>[This link](https://ivan4412.github.io/ &quot;Ivan的博客&quot;) has no title attribute.</code></pre><p> 输出:<br> <a href="https://ivan4412.github.io/" title="Ivan的博客" target="_blank" rel="noopener">This link</a> has no title attribute.</p></li><li><p>参考式链接：<br>在文中任意地方使用<br><em>[id]: + 链接地址</em><br>格式记录链接地址。<br>对于需链接文字，在链接文字括号后再接一个方括号，括号中内容为链接的标签id<br> 代码：</p><pre><code>This is [an example][ID1] reference-style link.  [ID1]: https://ivan4412.github.io/  &quot;Ivan的博客&quot;</code></pre><p> 输出：<br> This is <a href="https://ivan4412.github.io/" title="Ivan的博客" target="_blank" rel="noopener">an example</a> reference-style link.</p></li></ol><h2 id="9、强调"><a href="#9、强调" class="headerlink" title="9、强调"></a>9、强调</h2><p>使用**或__包住需强调的字词。<br>代码：  </p><pre><code>*single asterisks*  _single underscores_</code></pre><p>输出：<br><strong>single asterisks</strong><br> <strong>single underscores</strong></p><h2 id="10、图片"><a href="#10、图片" class="headerlink" title="10、图片"></a>10、图片</h2><p>图片链接方式和链接类似，亦分为行内式和参考式。</p><ol><li><p>行内式：<br> 使用!开头，紧接方括号括住的图片替代文字，紧接普通括号括住网址<br> 代码：</p><pre><code>![Ivanlogo](https://ivan4412.github.io/img/logo.jpg &quot;Ivan博客Logo&quot;)</code></pre><p> 输出：</p><p> <img src="https://ivan4412.github.io/img/logo.jpg" alt="Ivanlogo" title="Ivan博客Logo"></p></li><li><p>参考式：<br> 使用!开头，紧接方括号括住的图片替代文字，紧接方括号括住的地址标签id。<br> 代码：</p><pre><code>![Ivanlogo][img1]</code></pre><p> 输出：<br> <img src="https://ivan4412.github.io/img/logo.jpg" alt="Ivanlogo" title="Ivan博客Logo"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、特殊字符：&quot;&gt;&lt;a href=&quot;#1、特殊字符：&quot; class=&quot;headerlink&quot; title=&quot;1、特殊字符：&quot;&gt;&lt;/a&gt;1、特殊字符：&lt;/h2&gt;&lt;p&gt;对于部分Markdown语法中的特殊字符，需输出原字符的话，使用反斜线：即可。  如： &amp;copy;
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
